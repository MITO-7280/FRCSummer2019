import cv2
import numpy as np
import time
import math


hsvTapeLower = (0, 0, 240)
hsvTapeUpper = (185, 25, 255)

cap = cv2.VideoCapture(1)

while True:
    ret, tapeFrame = cap.read()
    if not ret:
        break

    # tapeBlurred = cv2.blur(tapeFrame, (10, 10))
    tapeHsv = cv2.cvtColor(tapeFrame, cv2.COLOR_BGR2HSV)
    tapeMask = cv2.inRange(tapeHsv, hsvTapeLower, hsvTapeUpper)
    tapeMask = cv2.erode(tapeMask, None, iterations=2)
    tapeMask = cv2.dilate(tapeMask, None, iterations=2)
    tapeContours, _ = cv2.findContours(tapeMask, cv2.RETR_TREE, cv2.CHAIN_APPROX_TC89_KCOS)
    # Copies frame and stores it in image
    tapeImage = tapeFrame.copy()
    # Processes the contours, takes in (contours, output_image, (centerOfImage)

    if len(tapeContours) > 1:
        cntsSorted = sorted(tapeContours, key=lambda x: cv2.contourArea(x), reverse=True)

        rect0 = cv2.minAreaRect(cntsSorted[0])
        box0 = cv2.boxPoints(rect0)
        box0 = np.int0(box0)
        cv2.drawContours(tapeFrame, [box0], 0, (0, 0, 255), 2)
        rect1 = cv2.minAreaRect(cntsSorted[1])
        box1 = cv2.boxPoints(rect1)
        box1 = np.int0(box1)
        cv2.drawContours(tapeFrame, [box1], 0, (0, 0, 255), 2)

        tape0Center = int(rect0[0][0]), int(rect0[0][1])
        tape1Center = int(rect1[0][0]), int(rect1[0][1])

        tapeMiddleCenter0 = (tape0Center[0] + tape1Center[0]) / 2
        tapeMiddleCenter1 = (tape0Center[1] + tape1Center[1]) / 2

        if tapeMiddleCenter0 < (320 / 2 - 320 / 20):
            tapePos = 1
        elif tapeMiddleCenter0 > (320 / 2 + 320 / 20):
            tapePos = 2
        else:
            tapePos = 3
        cv2.circle(tapeFrame, (int(tapeMiddleCenter0), int(tapeMiddleCenter1)), 5, (0, 0, 255), -1)
    else:
        tapePos = 0

    print(tapePos)

    cv2.imshow("w", tapeFrame)

    if cv2.waitKey(1) & 0xFF is ord('q'):
        break



